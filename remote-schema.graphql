# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID."
interface Node {
    "ID of the object."
    id: ID!
}

type Engine {
    airIntake: AirIntake
    capacity: String
    injection: Injection
    name: String
    type: Fuel
}

type Maintenance implements Node {
    engine: Engine
    id: ID!
    transmission: Transmission
    vehicle: Vehicle
    wheelDrive: WheelDrive
    works: [Work]
}

type Manufacturer implements Node {
    id: ID!
    localizedName: String
    name: String
}

type Money {
    amount: String!
    currency: String!
}

type Mutation {
    createAppealCalculator(input: createAppealCalculatorInput!): createAppealOutput
    createAppealCall(input: createAppealCallInput!): createAppealOutput
    createAppealCooperation(input: createAppealCooperationInput!): createAppealOutput
    createAppealQuestion(input: createAppealQuestionInput!): createAppealOutput
    createAppealSchedule(input: createAppealScheduleInput!): createAppealOutput
    createAppealTireFitting(input: createAppealTireFittingInput!): createAppealOutput
}

type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?."
    hasNextPage: Boolean!
}

type Part implements Node {
    discount: Money!
    id: ID!
    manufacturer: Manufacturer!
    name: String!
    number: String!
    price: Money!
    unit: Unit!
    universal: Boolean!
}

type PartItem {
    part: Part!
    quantity: Int!
    recommended: Boolean!
}

type Production {
    from: year
    till: year
}

type Query {
    maintenances(vehicleId: Uuid!): [Maintenance]
    part(id: Uuid!): Part
    reviews(after: Uuid, first: Int = 10): ReviewConnection
    vehicle(id: Uuid!): Vehicle!
    vehicles(manufacturerId: Uuid!): [Vehicle]
    works(maintenanceId: Uuid!): [Work]
}

type Review implements Node {
    author: String
    content: String
    id: ID!
    publishAt: Date
    source: ReviewSource
}

type ReviewConnection {
    nodes: [Review]
    pageInfo: PageInfo!
    totalCount: Int!
}

type Vehicle implements Node {
    caseName: String
    id: ID!
    localizedName: String
    manufacturer: Manufacturer!
    name: String!
    production: Production
}

type Work implements Node {
    description: String
    id: ID!
    name: String!
    parts: [PartItem]
    period: Int!
    position: Int!
    price: Money!
    recommended: Boolean!
}

type createAppealOutput {
    appealId: Uuid!
}

enum AirIntake {
    "Атмосферный"
    atmo
    "Турбированный"
    turbo
    "Неопределён"
    unknown
}

enum CalculatorWorkType {
    "Рекомендация"
    recommendation
    "Работа"
    work
}

enum Fuel {
    "Дизель"
    diesel
    "Электрический"
    electric
    "Этанол"
    ethanol
    "Бензин"
    petrol
    "Неопределён"
    unknown
}

enum Injection {
    "Классический"
    classic
    "Непосредственный впрыск"
    direct
    "Неопределён"
    unknown
}

enum ReviewSource {
    club
    google
    yandex
}

enum TireFittingCategory {
    "Легковая"
    car
    "Кроссовер"
    crossover
    "Минивен"
    minivan
    "Внедорожник"
    suv
    "Неопределён"
    unknown
}

enum Transmission {
    "Робот"
    AMT
    "Автоматическая"
    AT
    "Автоматическая (5 ступеней)"
    AT5
    "Автоматическая (7 ступеней)"
    AT7
    "Вариатор"
    CVT
    "Механическая"
    MT
    "Неопределена"
    unknown
}

enum Unit {
    "Грамм"
    gram
    "Килограмм"
    kilogram
    "Литр"
    liter
    "Метр"
    meter
    "Миллилитр"
    milliliter
    "Миллиметр"
    millimeter
    "Упаковка"
    package
    "Штука"
    thing
}

enum WheelDrive {
    "Полный"
    AWD
    "Передний"
    FWD
    "Задний"
    RWD
    "Неопределён"
    unknown
}

input CalculatorWorkInput {
    id: Uuid!
    isSelected: Boolean!
    name: String!
    parts: [CalculatorWorkPartInput]
    price: MoneyInput!
    type: CalculatorWorkType
}

input CalculatorWorkPartInput {
    count: Int!
    id: Uuid!
    isSelected: Boolean!
    name: String!
    price: MoneyInput!
}

input TireFittingWorkInput {
    name: String!
    price: MoneyInput!
}

input createAppealCalculatorInput {
    date: Date
    equipmentId: Uuid!
    mileage: Int!
    name: String!
    note: String
    phone: PhoneNumber!
    total: MoneyInput!
    works: [CalculatorWorkInput]!
}

input createAppealCallInput {
    phone: PhoneNumber!
}

input createAppealCooperationInput {
    name: String!
    phone: PhoneNumber!
}

input createAppealQuestionInput {
    email: Email!
    name: String!
    question: String!
}

input createAppealScheduleInput {
    date: Date!
    name: String!
    phone: PhoneNumber!
}

input createAppealTireFittingInput {
    category: TireFittingCategory!
    diameter: Int
    name: String!
    phone: PhoneNumber!
    total: MoneyInput!
    vehicleId: Uuid
    works: [TireFittingWorkInput]!
}


scalar Uuid

scalar Date

scalar year

scalar PhoneNumber

scalar MoneyInput

scalar Email
