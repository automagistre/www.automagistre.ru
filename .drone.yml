---
kind: pipeline
type: docker
name: default

clone:
    depth: 1

steps:
    -   name: build base
        image: docker:20.10.1
        volumes:
            -   name: docker.sock
                path: /var/run/docker.sock
        commands:
            - docker build -t "automagistre/www-node:base" --target node-base .
            - docker build -t "automagistre/www-php:base" --target base .
            - docker build -t "automagistre/www-nginx:base" --target nginx-base .

    -   name: push base
        image: docker:20.10.1
        volumes:
            -   name: docker.sock
                path: /var/run/docker.sock
        commands:
            - docker login --username "$USERNAME" --password "$PASSWORD"
            - docker push automagistre/www-php:base
            - docker push automagistre/www-node:base
            - docker push automagistre/www-nginx:base
        environment:
            USERNAME:
                from_secret: docker_username
            PASSWORD:
                from_secret: docker_password
        when:
            branch: [ master ]
        depends_on:
            - build base

    -   name: install
        image: automagistre/www-php:base
        commands:
            - echo APP_ENV=test >> .env
            - echo APP_DEBUG=1 >> .env
            - composer install --no-interaction --no-progress --classmap-authoritative
            - bin/console cache:warmup
            - bin/console assets:install public
        environment:
            APP_ENV: test
            APP_DEBUG: '1'
        depends_on:
            - build base

    -   name: install assets
        image: automagistre/www-node:base
        commands:
            - npm install --no-audit
            - NODE_ENV=production node_modules/.bin/webpack
        depends_on:
            - build base

    -   name: php-cs-fixer
        image: automagistre/www-php:base
        commands:
            - vendor/bin/php-cs-fixer fix --dry-run --diff-format udiff --using-cache=no
        when:
            branch:
                exclude: [ master ]
        depends_on:
            - install

    -   name: composer normalize
        image: automagistre/www-php:base
        commands:
            - composer normalize --dry-run
        when:
            branch:
                exclude: [ master ]
        depends_on:
            - install

    -   name: blank end line
        image: automagistre/www-php:base
        commands:
            - >-
                find .
                -not -path "./public/*"
                -not -path "./.idea/*"
                -not -path "./var/*"
                -not -path "./vendor/*"
                -not -path "./node_modules/*"
                -type f -exec grep -Iq . {} \; -and -print0
                | xargs -0 -L1 bash -c 'test -z "$(tail -c 1 "$0")"
                || (echo "No new line at end of $0" && exit 1)'
                || exit 1
        when:
            branch:
                exclude: [ master ]
        depends_on:
            - install

    -   name:  symfony requirements
        image: automagistre/www-php:base
        commands:
            - vendor/bin/requirements-checker
        when:
            branch:
                exclude: [ master ]
        depends_on:
            - install

    -   name:  phpstan
        image: automagistre/www-php:base
        commands:
            - vendor/bin/phpstan analyse --configuration phpstan.neon --no-progress --memory-limit=-1
        depends_on:
            - install

    -   name:  psalm
        image: automagistre/www-php:base
        commands:
            - vendor/bin/psalm --show-info=false --no-progress
        when:
            event: [ push ]
        depends_on:
            - install

    -   name:  phpunit
        image: automagistre/www-php:base
        commands:
            - vendor/bin/paratest --processes=$(grep -c ^processor /proc/cpuinfo || 4)
        environment:
            MYSQL_PASSWORD: 'db'
        depends_on:
            - install
            - install assets

    -   name: build
        image: docker:20.10.1
        volumes:
            -   name: docker.sock
                path: /var/run/docker.sock
        commands:
            - >-
                docker build -t "automagistre/www-php:${DRONE_BUILD_NUMBER}"
                --build-arg APP_ENV="prod"
                --build-arg APP_DEBUG="0"
                --target php
                .
            - >-
                docker build -t "automagistre/www-nginx:${DRONE_BUILD_NUMBER}"
                --build-arg APP_ENV="prod"
                --build-arg APP_DEBUG="0"
                --target nginx
                .
        depends_on:
            - build base

    -   name: deploy
        image: docker/compose:1.25.0-alpine
        volumes:
            -   name: env
                path: /drone/src/.env
            -   name: docker.sock
                path: /var/run/docker.sock
        commands:
            - docker-compose --file .swarm.yml config | docker stack deploy --prune --with-registry-auth --compose-file - www
        when:
            branch:
                - master
                - rc
        depends_on:
            - build
            - phpunit

volumes:
    -   name: docker.sock
        host:
            path: /var/run/docker.sock
    -   name: env
        host:
            path: /opt/secrets/www
